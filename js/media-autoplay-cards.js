// /js/media-autoplay-cards.js
document.addEventListener('DOMContentLoaded', () => {
  const MOBILE_QUERY = '(hover: none) and (pointer: coarse)';
  const mql = window.matchMedia(MOBILE_QUERY);
  let isMobile = mql.matches;

  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏, –∫–æ–∏—Ç–æ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø —Ç—Ä—è–±–≤–∞ –¥–∞ PLAY —Å–∞–º–æ –ø—Ä–∏ hover:
  // üëâ –î–æ–±–∞–≤–µ–Ω–∏: .two-col__right .pain-buttons-vertical ‚Ä¶ –∏ #pain-conditions-intro .pain-buttons-grid ‚Ä¶
  const HOVER_CONTAINERS = [
    '.card__media',
    '.pain-button-media',
    '.journey-image',
    '.image-container',

    // –Ω–æ–≤–∏—Ç–µ —Ç–∏ —Å–µ–∫—Ü–∏–∏ (–∏–∑—Ä–∏—á–Ω–æ, –∑–∞ –¥–∞ —Å–µ –∑–∞–∫–∞—á–∞—Ç –≤—ä–≤ –≤—Å–∏—á–∫–∏ —Å–ª—É—á–∞–∏):
    '.pain-buttons-grid .pain-button-media',
    '.pain-buttons-vertical .pain-button-media',
    '.two-col__right .pain-buttons-vertical .pain-button-media',
    '#pain-conditions-intro .pain-buttons-grid .pain-button-media',
    // –∞–∫–æ –Ω—è–∫—ä–¥–µ –ª–∏–ø—Å–≤–∞ .pain-button-media, —Ö–≤–∞—â–∞–º–µ –∏ .image-container –≤—ä—Ç—Ä–µ –≤ —Ç–µ–∑–∏ —Å–µ–∫—Ü–∏–∏:
    '.pain-buttons-grid .image-container',
    '.pain-buttons-vertical .image-container',
    '.two-col__right .pain-buttons-vertical .image-container',
    '#pain-conditions-intro .pain-buttons-grid .image-container'
  ].join(',');

  // –ù–∞–º–∏—Ä–∞ –¥–≤–æ–π–∫–∞—Ç–∞ (static img, video) –≤ –¥–∞–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  function getMediaPair(container) {
    let staticImg =
      container.querySelector('.img--static, .static-img, .kinesitherapy-img, .static-hernia-img') ||
      container.querySelector('img'); // fallback

    let video =
      container.querySelector('video.img--hover, video.hover-img, video.hover-video, video.hover-muscle-video, video.kinesitherapy-video, video.hover-hernia-video') ||
      container.querySelector('video'); // fallback

    return { staticImg, video };
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∑–∞ –º–æ–±–∏–ª–Ω–æ autoplay (iOS/Safari)
  function prepVideo(v) {
    if (!v) return;
    v.removeAttribute('autoplay');               // —Ü–µ–Ω—Ç—Ä–∞–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª
    v.muted = true;
    v.defaultMuted = true;
    v.setAttribute('muted', '');
    v.playsInline = true;
    v.setAttribute('playsinline', '');
    v.setAttribute('webkit-playsinline', '');
    // –ü–æ-—â–∞–¥—è—â preload, –∞–∫–æ –ª–∏–ø—Å–≤–∞
    if (!v.getAttribute('preload')) v.preload = 'metadata';
  }

  // –ü–æ-–Ω–∞–¥–µ–∂–¥–Ω–æ play (–∏–∑—á–∞–∫–≤–∞ readyState –ø—Ä–∏ –Ω—É–∂–¥–∞)
  function safePlay(v) {
    if (!v) return;
    const doPlay = () => v.play().catch(() => {});
    if (v.readyState >= 2) {
      doPlay();
    } else {
      const onData = () => { v.removeEventListener('loadeddata', onData); doPlay(); };
      v.addEventListener('loadeddata', onData, { once: true });
      try { v.load(); } catch (e) {}
    }
  }

  // –ù–∞ –º–æ–±–∏–ª–Ω–∏ ‚Äì –ø–æ–∫–∞–∑–≤–∞ –≤–∏–¥–µ–æ –∏ —Å–∫—Ä–∏–≤–∞ —Å—Ç–∞—Ç–∏—á–Ω–∞—Ç–∞ —Å–Ω–∏–º–∫–∞ (–ø–æ–±–µ–∂–¥–∞–≤–∞ hover CSS)
  function revealOnMobile(container, video, staticImg) {
    if (!isMobile || !video) return;
    if (staticImg) staticImg.style.setProperty('opacity', '0', 'important');
    video.style.setProperty('opacity', '1', 'important');
    video.style.setProperty('visibility', 'visible', 'important');
  }

  function hideOnMobile(container, video, staticImg) {
    if (!isMobile || !video) return;
    if (staticImg) staticImg.style.setProperty('opacity', '1', 'important');
    // –∞–∫–æ –ø–æ –¥–∏–∑–∞–π–Ω –≤–∏–¥–µ–æ—Ç–æ –µ "hover", –≥–æ —Å–∫—Ä–∏–≤–∞–º–µ –Ω–∞ –º–æ–±–∏–ª–Ω–æ –∏–∑–≤—ä–Ω –µ–∫—Ä–∞–Ω–∞
    video.style.setProperty('opacity', '0', 'important');
  }

  // IntersectionObserver –∑–∞ –º–æ–±–∏–ª–Ω–∏ (–∏ –∑–∞ –≤—Å–∏—á–∫–∏, –∫–æ–∏—Ç–æ –Ω–µ —Å–∞ —Å–∫—Ä–∏—Ç–∏ –æ—Ç hover –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø)
  const io = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const video = entry.target;
      const container = video.closest(HOVER_CONTAINERS) || video.parentElement;
      const { staticImg } = getMediaPair(container);
      const css = window.getComputedStyle(video);
      const visuallyHidden = (css.opacity === '0' || css.visibility === 'hidden');
      const shouldPlay = entry.isIntersecting && entry.intersectionRatio >= 0.35;

      if (shouldPlay) {
        // –ù–∞ –º–æ–±–∏–ª–Ω–∏ ‚Äì —Ä–∞–∑–∫—Ä–∏–≤–∞–º–µ –∏ –ø—É—Å–∫–∞–º–µ
        revealOnMobile(container, video, staticImg);

        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø, –∞–∫–æ –µ —Å–∫—Ä–∏—Ç–æ (—á–∞–∫–∞ hover), –Ω–µ –≥–æ –ø—É—Å–∫–∞–º–µ –Ω–∞—Å–∏–ª–∞
        if (!isMobile && visuallyHidden) return;

        safePlay(video);
      } else {
        if (!video.paused) video.pause();
        // –ù—É–ª–∏—Ä–∞–π –ø—Ä–∏ –∏–∑–ª–∏–∑–∞–Ω–µ
        if (!video.classList.contains('no-reset-on-exit')) video.currentTime = 0;
        hideOnMobile(container, video, staticImg);
      }
    });
  }, {
    root: null,
    rootMargin: '200px 0px',
    threshold: [0, 0.2, 0.35, 0.5, 0.75, 1]
  });

  // –ù–∞—Å—Ç—Ä–æ–π–≤–∞ –µ–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–∫–∞—Ä—Ç–∞/–±—É—Ç–æ–Ω) ‚Äì –ø–æ–¥–≥–æ—Ç–≤—è –≤–∏–¥–µ–æ, hover –∑–∞ –¥–µ—Å–∫—Ç–æ–ø, IO –∏ –∑–∞ –º–æ–±–∏–ª–Ω–∏
  function wireContainer(container) {
    const { staticImg, video } = getMediaPair(container);
    if (!video) return;

    prepVideo(video);

    // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø ‚Äì play/pause —Å–∞–º–æ –ø—Ä–∏ hover
    container.addEventListener('mouseenter', () => {
      if (isMobile) return;
      if (staticImg) staticImg.style.opacity = '0';
      video.style.opacity = '1';
      safePlay(video);
    });
    container.addEventListener('mouseleave', () => {
      if (isMobile) return;
      if (staticImg) staticImg.style.opacity = '1';
      video.style.opacity = '0';
      video.pause();
      video.currentTime = 0;
    });

    // IO –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ:
    // - –Ω–∞ –º–æ–±–∏–ª–Ω–∏: –≤–∏–Ω–∞–≥–∏
    // - –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø: —Å–∞–º–æ –∞–∫–æ –µ –≤–∏–¥–∏–º–æ –ø–æ CSS (—Ç.–µ. –Ω—è–º–∞ hover-—Å–∫—Ä–∏–≤–∞–Ω–µ)
    const css = window.getComputedStyle(video);
    const visuallyHidden = (css.opacity === '0' || css.visibility === 'hidden');
    if (isMobile || !visuallyHidden) {
      io.observe(video);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–≤–∞ –≤—Å–∏—á–∫–∏ —Ç–µ–∫—É—â–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏
  function wireAll() {
    document.querySelectorAll(HOVER_CONTAINERS).forEach(wireContainer);
  }

  // –†–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –ø—Ä–∏ —Å–º—è–Ω–∞ –º–æ–±–∏–ª–Ω–æ/–¥–µ—Å–∫—Ç–æ–ø
  function reconfigure() {
    isMobile = mql.matches;
    io.disconnect();
    wireAll();
  }

  // –ü—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞–∫–∞—á–∞–Ω–µ
  wireAll();

  // –ê–∫–æ –¥–æ–±–∞–≤—è—à –∫–∞—Ä—Ç–∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ (–Ω–∞–ø—Ä. –≤ —Å–∞–π–¥–±–∞—Ä ‚Äû–ë–æ–ª–∫–æ–≤–∏ —Å—ä—Å—Ç–æ—è–Ω–∏—è‚Äú)
  const mo = new MutationObserver((mutations) => {
    let needsWire = false;
    for (const m of mutations) {
      if (m.addedNodes && m.addedNodes.length) {
        needsWire = true; break;
      }
    }
    if (needsWire) wireAll();
  });
  mo.observe(document.body, { childList: true, subtree: true });

  // –†–µ—Å–ø–æ–Ω—Å–∏–≤ —Å–º—è–Ω–∞
  if (mql.addEventListener) mql.addEventListener('change', reconfigure);
  window.addEventListener('resize', reconfigure, { passive: true });
});
